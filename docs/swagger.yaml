basePath: /api/v1
definitions:
  dto.AuthResponse:
    properties:
      token:
        type: string
    type: object
  dto.BookRequest:
    properties:
      author_id:
        type: integer
      description:
        type: string
      isbn:
        type: string
      publication_year:
        type: integer
      title:
        type: string
    required:
    - author_id
    - isbn
    - publication_year
    - title
    type: object
  dto.BookResponse:
    properties:
      data:
        $ref: '#/definitions/models.Book'
    type: object
  dto.BooksResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Book'
        type: array
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.Book:
    properties:
      author_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      isbn:
        type: string
      publication_year:
        type: integer
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.Review:
    properties:
      book_id:
        type: integer
      comment:
        type: string
      created_at:
        type: string
      date_posted:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple REST API using Gin framework
  title: Go REST API with Gin and Swagger
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /api/v1/books:
    get:
      consumes:
      - application/json
      description: Get a list of all books with their authors and reviews
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BooksResponse'
      summary: Get all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Add a new book to the database
      parameters:
      - description: Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new book
      tags:
      - Books
  /api/v1/books/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a book from the database
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a book
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: Get a specific book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BookResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get book by ID
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update details of an existing book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a book
      tags:
      - Books
  /api/v1/protected:
    get:
      consumes:
      - application/json
      description: Middleware that protects routes with JWT authentication
      produces:
      - application/json
      responses:
        "200":
          description: Authorized
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: JWT authentication middleware
      tags:
      - Authentication
swagger: "2.0"
